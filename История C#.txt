// - комментарий к коду(то что после слэшей не исполняется и не входит в код проги)
/*---------
-----------   -  область комментирования(не исполняется)
----------*/

Console.WriteLine("Hello, World!") - где, Console - это команда для взаимодействия с окном терминала, WriteLine - это команда для выведения-
текста в терминал, HelloWorld - это сам текст, который нужно вывести в терминал

Write() - вывод в терминал в одну строку
WriteLine() - вывод в терминал с переходом на новую строку(то есть после этой команды делается отступ(переход, энтер) на новую строку
ReadLine() - прочитать строку из терминала(с переходом после команды на новую строку)

Чтобы запустить программу, нужно в терминале ввести команду 'dotnet run'

Чтобы создать новый проект(прогу), нужно в терминале ввести 'dotnet new console'

Типы переменных :
int - целые числа
double - вещественные(дробные) числа (в том числе диапазон целых чисел гораздо шире чем у инт)

Символы операций :
+ - сложение
- - вычитание
* - умножение
/ - деление (если результат деления дробь, но записывается в переменную 'int', то запишется только целая часть числа)
% - остаток от деления (если остатка нет, то 0)

Чтобы сделать пользовательский ввод, нужно получить от пользователя число. Так как пользователь вводит строку, то нужно конвертировать эту строку в число. Пример: int number = Convert.ToInt32(Console.ReadLine());

Символ неравенства '!=', то есть инверсия '==', то есть тождественен '<>'(но так(<>) написать нельзя).

'number' +=1   -   операция прибавления 1 к числу (аналоги 'count = count + 1' и 'count++')

'if'  -  однопроходная команда(операция), после прохода которой, возврата наверх к if не случается, то есть прога продолжает выполнятся вниз и не зацикливается
'while'  -  многопроходная(цикличная), после прохода которой, происходит возврат наверх к while и снова сравнивается(выполняется) условие(справа, в скобках от вайл) до тех пор, пока не выполнится условие выхода из этого цикла

Не рекомендуется в операции вывода, например в 'Console.Write' производить вычисления, лучше их выполнить в дополнительной строке, задействовав дополнительную переменную, так и удобнее и визуально понятнее

'Next(1, 10)' - задать диапазон значений от 1 включ до 10 невключ (то есть числа 1 2 3 4 5 6 7 8 9)

Символ нижнего подчёркивания технически использовать можно, но не нужно, так как это не принято, и будет считаться плохим тоном

'break;' - завершает(останавливает) программу

int[] array = new int[10];   //ДОСЛОВНО - СОЗДАЙ НОВЫЙ МАССИВ, В КОТОРОМ БУДЕТ 10 ЭЛЕМЕНТОВ. Массив изначально будет заполнен нулями

'void' метод ничего не возвращает из функции (СОЗДАЁТ ШАБЛОН)

При работе с if или while можно задавать несколько условий с помощью команд '&&' (И), '||' (Или). Пример: if(inputNumber > numberMin && inputNumber < numberMax)

Если нужно уточнить работу команд, можно посмотреть таблицы истинности

Исполнительные блоки функций(то есть описание функций, то есть блоки инициализации) лучше всего группировать в отдельный блок и размещать его либо в начале, либо в конце программы(кода)

ФУНКЦИЯ - имеет возвращаемое значение
ПРОЦЕДУРА - не имеет возвращаемого значения(шаблон)
МЕТОД - общее название для функций и процедур в объектно-ориентированных языках прогр.

Интерполяция - скрещивание строк(то есть вставка в текущую строку переменной из другой строки) с помощью символа '$'
Пример конкатенации(+): Console.WriteLine(number1 + number2 + "text");
Пример интерполяции($): Console.WriteLine($"{number1} {number2} text");

При конвертации из дубль в инт дробного числа, происходит его округление, и в инт уже записывается целое округлённое в большую сторону значение, на пример: 1) double 0.500 -> int = int 0 2) double 0.501 -> int = int 1. 
Чтобы в инт записать НЕОКРУГЛЁННОЕ значение, нужно сделать так: 
double x1 = 0;
x = y / c;
x1 = Math.Floor(x);
i = Convert.ToInt32(x1);
то есть мы переменную x перед конвертацией сами округлили в меньшую сторону(то есть отбросили дробную часть) и записали новое значение в х1 и далее уже работаем с ним

Для инициализации двухмерного массива нужно в квадратных скобках поставить запятую, вот так int[,] = new int[3, 3]. Числовой массив на 3 строки и 3 столбца.


Функция для округления.  В скобках после раунд, вторым аргументом(параметром) указывается количество знаков после запятой, которые нужно оставить после округления
double Approximate(double a)
{
    a = Math.Round(a, 3);   (результат a,(3 знака))
    return a;
}


int[][] - массив массивов. в нем есть позиция массива в общей структуре, и позиция элемента в выбранном массиве


